<h1>Software Principles </h1>
<p>The way you develop & think about software is influenced by the principles you're aware of.

- <a href="/software-principles/bikeshedding">Bikeshedding or the Law of Triviality</a>
- <a href="/software-principles/brooks"> Brook's </a>
- <a href="/software-principles/chestertons">Chesterton's Fence</a>
- <a href="/software-principles/conways">Conway's</a>
- <a href="/software-principles/demeters">Demeter's Law or the Principle of Least Knowledge</a>
- <a href="/software-principles/galls">Gall's</a>
- <a href="/software-principles/hofstadters">Hofstadter's</a>
- <a href="/software-principles/hollywood-principle">Hollywood Principle</a>
- <a href="/software-principles/jakobs">Jakob's</a>
- <a href="/software-principles/knuths">Knuth's</a>
- <a href="/software-principles/linus">Linus's</a>
- <a href="/software-principles/murphys">Murphy's</a>
- <a href="/software-principles/norvigs">Norvig's</a>
- <a href="/software-principles/paretos">Pareto's Principle or the 80/20 Rule</a>
- <a href="/software-principles/peter">Peter Principle</a>
- <a href="/software-principles/postels">Postel's</a>
- <a href="/software-principles/wirths">Wirth's</a>

<br>

<h1>Tech Talks</h1>
How to speak - Patrick Winston (MIT OpenCourse)

<br>

<h1>How to learn</h1>
Engineers are constantly learning new things.

New software patterns, paradigms, ways of working, code structure, languages, libraries, frameworks etc

Good engineers I know are constantly trying to maximise their learning to make themselves even better at what they do.

I have had to do this too & continually read, write and develop to become a better coder.

So as I learn new things, I will endevaour to add the useful resources to the list.

This is just what helped me, if there are better resources, contact me via this site - and let me know!

- How to learn Docker
- How to learn Go
- How to learn Kubernetes
- How to learn Math
- How to learn Micro-frontends
- How to learn React
- How to learn Webpack

<br>

<h1>Books</h1>
I love reading. In the past, I have set myself challenges to read a book a week for a year, across a mixture of technical and non-technical content.

I keep this list purely as a reminder of the (profesional development) books that I have read.

- CQRS, the Example by Mark Nijhof
- The Slight Edge by Jeff Olson
- Freakonomics by Stephen J. Dubner and Steven Levitt
- Think Like a Freak by Stephen J. Dubner and Steven Levitt
- Who Moved My Cheese? by Spencer Johnson
- Extreme Ownership: How U.S. Navy SEALs Lead and Win by Jocko Willink and Leif Babin
- So Good They Can't Ignore You: Why Skills Trump Passion in the Quest for Work You Love by Cal Newport
- Deep Work by Cal Newport
- How to Become a Straight-A Student by Cal Newport
- The Phoenix Project by Gene Kim, George Spafford, and Kevin Behr
- The Selfâ€‘Taught Programmer by Cory Althoff
- Practical DevOps by Joakim Verona
- Mastering TypeScript by Nathan Rozentals
- The Pragmatic Programmer by Andy Hunt and Dave Thomas
- The Standout Developer by Randall Kanna
- The Coding Career Handbook by Shawn 'swyx' Wang
- Code Reviews by Dr. Michaela Greiler

If there is a good book you think I should read, please contact me via this site and tell me, I would love to read it! :)